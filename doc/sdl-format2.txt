The system description language (SDL) file is made up of 6 parts.  The
first is the line giving the xml version (1.0).

<?xml version="1.0"?>

The second specified the sdl version.  This file describes version
2.0.  The line is written as:

<sdl version="2.0"/>

There are 4 other sections to the file: config, variables,
param_include and sst.  Ordering of these four sections does not
matter.  However, the data structures resulting from the xml parsing
will process the sections in the proper order (i.e., the variables and
param_include sections will be analyzed before the sst section so that
substitutions will work appropriately).  Each of these is described
below.

CONFIG

The <config> section contains definitions for simulation parameters.
The parameters in this section are the same as those that can be
defined on the command line (with the exception of the sdl-file
parameter, for obvious reasons).  Parameters are defined one per line,
using the parameter=value (no spaces allowed) syntax.  An example follows:

<config>
    run-mode=both
    partitioner=self
</config>


VARIABLES

It is possible to set up variable values which can be used later in
the file for assigning values to parameters.  This is not the same as
a #define, the parser will not replace all instances of the variable
name anywhere in the file.  There are specific places where variables
are allowed, which will be described below.  Variables are defined
with an alphanumeric name and reference with the same name preceeded
with a $.  An example of defining variables follows:

<variables>
    <nic_link_lat> 200ns </nic_link_lat>
    <rtr_link_lat> 10ns </rtr_link_lat>
</variables>

In this case, the string $nic_link_lat will be replaced with the
string 200ns, if it is used where a variable is valid to use.


PARAM_INCLUDE

The <param_include> section allows the user to provide a list of
parameters with values that can be included in the <param> section of
components (how this is done is described in the SST section).  This
can be used to describe common parameters that would otherwise need to
be duplicated for each component.  A parameter explicity defined in a
<param> section will override the same parameter definition in a
param_include.  Within the <param_include> section, groups of
parameters are named and defined using the following syntax:

<group_name>
    <param1> value1 </param1>
    <param2> value2 </param2>
    <param3> value3 </param3>
    ...
</group_name>

Thus, a param_include section would look something like the following:

<param_include>

    <rtr_params>
        <clock> 500Mhz </clock>

        <network.xDimSize> 2 </network.xDimSize>
        <network.yDimSize> 2 </network.yDimSize>
        <network.zDimSize> 2 </network.zDimSize>

        <routing.xDateline> 0 </routing.xDateline>
        <routing.yDateline> 0 </routing.yDateline>
        <routing.zDateline> 0 </routing.zDateline>
    </rtr_params>

    <cpu_params>
        <radix> 2 </radix>
        <nodes> 8 </nodes>
        <msgrate> 5MHz </msgrate>
        <xDimSize> 2 </xDimSize>
        <yDimSize> 2 </yDimSize>
        <zDimSize> 2 </zDimSize>
        <application> allreduce.tree_triggered </application>
        <latency> 500 </latency>
    </cpu_params>

    <nic_params>
        <clock> 500Mhz </clock>
        <timing_set> 2 </timing_set>
    </nic_params>

</param_include>


SST

The <sst> section lists all components to be included in the
simulation, along with how they are to be hooked together.


A component desription is made up of three parts: the component
information, a params section, and a list of links to be hooked to the
component.


<component>

The component information section includes the <component>
declaration, along with the component name and type.  It is also
possible to optionally specify the MPI rank this component should be
mapped to in the simulation (this allows the user to self partition
the simulation).  The rank specifications are ignored unless the
partitioner is set to "self".  These options are specified with the
component declaration as follows:

<component name="name" type="type" rank="rank">

The quotes are optional.  The different values have the following
meanings:
    - name: name used to reference the component
    - type: type of the component using library:component syntax
    - rank: MPI rank the component should be mapped to during simulation


    
    <params>
    
    The <params> section allows the user to specify name/value pairs
    that are passed in the SST::Component inside a Params object.  The
    user can include a list of param_includes to include in the
    section by adding "include=" followed by a comma separated list of
    param_includes.  Other parameters are added as name value pairs
    using the <param> value </param> syntax.  The param section as a
    whole uses the following syntax (the example includes an include=
    statement):

    <params include=include1,include2,...>
        <param1> value1 </param1>
        <param2> value2 </param2>
        ...    
    </params>

    Also remember that the name value pairs explicity defined in the
    params section will override identically name parameters in any
    param_include included through the include= statement.


    <link>

    The last piece of information is the list of how the component's
    ports are connected with the rest of the simulation.  A link is
    bi-direction and one-to-one (i.e., each link name may only appear
    twice in an sdl file) and identified by name.  A component only
    specifies half of the link information.  SST will match up the two
    halves of the link and ensure proper connection during simulation.
    A link declaration includes the following information: name of the
    link, name of the port, and the latency of the link.  The latency
    refers to the latency of events sent from the current component
    and need not match the latency of the return path.  The syntax for
    declaring a link is as follows:

    <link name="name" port="port" latency="latency"/>

    The quotes are optional, and the latency declaration can be either
    a string or a variable.

A complete component declaration uses the following syntax:


<component name=name type=type rank=rank>
    <params include=include_list>
        <param1> value1 </param1>    
        <param2> value2 </param2>
	...
    </params>
    <link name=link1 port=port1 latency=10ns/>
    <link name=link2 port=port2 latency=$port2_lat/>
    ...
</component>


    
<introspector>

The format for introspectors is the same as for components, except
that you only specify name and type in the introspector information
section.  Additionally, there is not <links> section.

A complete introspector declaration uses the follwing syntax:

<introspector name=name type=type>
    <params include=include_list>
        <param1> value1 </param1>
	<param2> value2 </param2>
	....
    </params>
</introspector>


NOTE: This sample file is intended only to show format, it cannot be
used to run an actual simulation.

--------  Sample  ----------

<?xml version="1.0"?>

<sdl version="2.0"/>

<config>
    run-mode=both
</config>

<variables>
    <nic_link_lat> 200ns </nic_link_lat>
    <rtr_link_lat> 10ns </rtr_link_lat>
</variables>

<param_include>

    <rtr_params>
        <clock> 500Mhz </clock>

        <network.xDimSize> 2 </network.xDimSize>
        <network.yDimSize> 1 </network.yDimSize>
        <network.zDimSize> 1 </network.zDimSize>

        <routing.xDateline> 0 </routing.xDateline>
        <routing.yDateline> 0 </routing.yDateline>
        <routing.zDateline> 0 </routing.zDateline>
    </rtr_params>

    <cpu_params>
        <radix> 2 </radix>
        <nodes> 2 </nodes>
        <msgrate> 5MHz </msgrate>
        <xDimSize> 2 </xDimSize>
        <yDimSize> 1 </yDimSize>
        <zDimSize> 1 </zDimSize>
        <application> allreduce.tree_triggered </application>
    </cpu_params>

    <nic_params1>
        <clock> 500Mhz </clock>
    </nic_params1>

    <nic_params2>
        <timing_set> 2 </timing_set>
    </nic_params2>

</param_include>


<sst>

    <introspector name=routers type=portals4_sm.router_introspector >
        <params include=cpu_params>
            <id> 0 </id>
        </params>
    </introspector>

    <component name=0.cpu type=portals4_sm.trig_cpu >
        <params include=cpu_params>
            <id> 0 </id>
        </params>
        <link name=0.cpu2nic port=nic latency=$nic_link_lat/>
    </component>

    <component name=0.nic type=portals4_sm.trig_nic >
        <params include=nic_params1,nic_params2>
            <id> 0 </id>
        </params>
        <link name=0.cpu2nic port=cpu latency=$nic_link_lat/>
        <link name=0.nic2rtr port=rtr latency=$nic_link_lat/>
    </component>

    <component name=0.rtr type=SS_router.SS_router >
        <params include=rtr_params>
            <id> 0 </id>
        </params>
        <link name=0.nic2rtr port=nic latency=$nic_link_lat/>
        <link name=xr2r.0.0.1 port=xPos latency=$rtr_link_lat/>
        <link name=xr2r.0.0.0 port=xNeg latency=$rtr_link_lat/>
    </component>


    <component name=1.cpu type=portals4_sm.trig_cpu >
        <params include=cpu_params>
            <id> 1 </id>
        </params>
        <link name=1.cpu2nic port=nic latency=$nic_link_lat/>
    </component>

    <component name=1.nic type=portals4_sm.trig_nic >
        <params include=nic_params1,nic_params2>
            <id> 1 </id>
        </params>
        <link name=1.cpu2nic port=cpu latency=$nic_link_lat/>
        <link name=1.nic2rtr port=rtr latency=$nic_link_lat/>
    </component>

    <component name=1.rtr type=SS_router.SS_router >
        <params include=rtr_params>
            <id> 1 </id>
        </params>
        <link name=1.nic2rtr port=nic latency=$nic_link_lat/>
        <link name=xr2r.0.0.0 port=xPos latency=$rtr_link_lat/>
        <link name=xr2r.0.0.1 port=xNeg latency=$rtr_link_lat/>
    </component>

</sst>
